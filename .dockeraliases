#!/bin/bash

alias dm="docker-machine"

#########################################
# emulates the commands below like they would natively be in docker
# docker clean -- runs --> docker-clean
# etc
docker() {
  if command -v "docker-$1" > /dev/null 2>&1; then
    subcommand=$1
    shift
    docker-$subcommand $@
  else
    /usr/local/bin/docker $@
  fi
}

# Emulates Docker Terminal Quickstart alias using alias
docker-qs() {
  # ignores lines that spawn a new login shell
  # kind-off risky, keep track of this change each update? Alternatives?
  sed -n '/USER_SHELL/q;p' /Applications/Docker/Docker\ Quickstart\ Terminal.app/Contents/Resources/Scripts/start.sh | sh
  # start nfs right after
  docker-machine-nfs default
}

# cleans untagged images
# cleans dangling volumes
docker-clean() {
  for i in `docker images|grep \<none\>|awk '{print $3}'`;do docker rmi -f $i;done
  for i in `docker volume ls -qf dangling=true`; do docker volume rm $i; done
}

# stop and remove container
docker-strm() {
  docker stop $1
  docker rm $1 1> /dev/null
}

# get ip of container
docker-ip() {
  docker inspect --format '{{ .NetworkSettings.IPAddress }}' $1
}

# purges all images and containers
docker-purge() {
  echo -n "Are you sure you want to purge Docker? This will delete all containers, volumes and images! [y|N] "
  read response
  if [[ $response =~ ^(y|yes|Y) ]];then
    #docker rm $(docker ps -a -q)
    if [[ $(docker ps -q) ]]; then
      for i in `docker ps -q|awk '{print $1}'`; do
        docker stop -f $i
        docker rm -f $i
      done
    fi
    #docker rmi $(docker images -q)
    if [[ $(docker images -q) ]]; then
      #docker rmi $(docker images -qa)
      for i in `docker images -q|awk '{print $1}'`; do
        docker rmi -f $i
      done
    fi
    # remove all volumes
    if [[ $(docker volume ls -q) ]]; then
      for i in `docker volume ls -q|awk '{print $1}'`; do
        docker volume rm $i
      done
    fi
  fi
}

docker-daemon() {
  if [ -z "$1" ]; then
    echo "Error: Expected to get one or more machine names as arguments."
  else
    docker-machine ls | grep "$1" &> /dev/null
    if [[ $? == 0 ]]; then
      docker-machine env $1 --shell=zsh | head -n -2
      eval $(docker-machine env $1 --shell=zsh)
    else
      echo "Error: Machine '$1' not found."
    fi
  fi
}

# restarts specified docker machine
docker-restart() {
  DOCKER_MACHINE=/usr/local/bin/docker-machine

  if [ -z "$1" ]; then
    echo "Error: Expected to get one or more machine names as arguments."
  else
    $DOCKER_MACHINE ls | grep "$1" &> /dev/null
    if [[ $? == 0 ]]; then
      $DOCKER_MACHINE stop $1 2> /dev/null
      $DOCKER_MACHINE env $1 --shell=zsh | head -n -2
      eval $($DOCKER_MACHINE env $1 --shell=zsh)
    else
      echo "Error: Machine '$1' not found."
    fi
  fi
}
