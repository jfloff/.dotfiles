#!/bin/bash

#########################################
# emulates the commands below like they would natively be in docker
# docker clean -- runs --> docker-clean
# etc
docker() {
  if command -v "docker-$1" > /dev/null 2>&1; then
    subcommand=$1
    shift
    docker-$subcommand $@
  else
    /usr/local/bin/docker $@
  fi
}

# cleans untagged images
# cleans dangling volumes
docker-clean() {
  # dependant images can be released after the original are deleted
  # cleans all those scenarios
  while : ; do
    IMAGE_IDS=$(docker images | grep \<none\> | awk '{print $3}')
    NUM_IMAGES=$(echo $IMAGE_IDS | sed '/^\s*$/d' | wc -l)
    [[ $NUM_IMAGES != 0 ]] || break
    printf '%s\n' "$IMAGE_IDS" | while IFS= read -r i; do docker rmi -f $i; done
  done
  for i in `docker volume ls -qf dangling=true`; do docker volume rm $i; done
}

# stop and remove container
docker-strm() {
  docker stop $@
  docker rm $@ 1> /dev/null
}

# get ip of container
docker-ip() {
  docker inspect --format '{{ .NetworkSettings.IPAddress }}' $1
}

_rmcontainers() {
  #docker rm $(docker ps -a -q)
  if [[ $(docker ps -a -q) ]]; then
    for i in `docker ps -a -q|awk '{print $1}'`; do
      docker stop $i
      docker rm -f $i
    done
  fi
}

_rmimages() {
  #docker rmi $(docker images -q)
  if [[ $(docker images -q) ]]; then
    #docker rmi $(docker images -qa)
    for i in `docker images -q|awk '{print $1}'`; do
      docker rmi -f $i
    done
  fi
}

_rmvolumes() {
  # remove all volumes
  if [[ $(docker volume ls -q) ]]; then
    for i in `docker volume ls -q|awk '{print $1}'`; do
      docker volume rm $i
    done
  fi
}

# purges all images and containers
docker-purgei() {
  echo -n "Are you sure you want to purge Docker images? This will delete all images and volumes! [y|N] "
  read response
  if [[ $response =~ ^(y|yes|Y) ]]; then
    _rmimages
    _rmvolumes
  fi
}

docker-purgep() {
  echo -n "Are you sure you want to purge Docker containers? This will delete all containers! [y|N] "
  read response
  if [[ $response =~ ^(y|yes|Y) ]];then
    _rmcontainers
  fi
}

# purges all images and containers
docker-purge-all() {
  echo -n "Are you sure you want to purge Docker? This will delete all containers, volumes and images! [y|N] "
  read response
  if [[ $response =~ ^(y|yes|Y) ]];then
    _rmcontainers
    _rmimages
    _rmvolumes
  fi
}
